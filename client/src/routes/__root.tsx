import { createRootRoute, Outlet } from "@tanstack/react-router";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { lazy, Suspense } from "react";

import Footer from "~/components/footer";
import Header from "~/components/header";
import Skeleton from "~/components/skeleton";
import NotFoundPage from "~/components/notFoundPage";

import { generateUUID } from "~/utils/generateUUID";
import { getLocalStorageItem, setLocalStorageItem } from "~/utils/localStorage";

const TanStackRouterDevtools =
	process.env.NODE_ENV === "production"
		? () => null // Render nothing in production
		: lazy(() =>
				// Lazy load in development
				import("@tanstack/router-devtools").then((res) => ({
					default: res.TanStackRouterDevtools,
					// For Embedded Mode
					// default: res.TanStackRouterDevtoolsPanel
				})),
			);

const ReactQueryDevtools =
	process.env.NODE_ENV === "production"
		? () => null // Render nothing in production
		: lazy(() =>
				// Lazy load in development
				import("@tanstack/react-query-devtools").then((res) => ({
					default: res.ReactQueryDevtools,
					// For Embedded Mode
					// default: res.ReactQueryDevtoolsPanel
				})),
			);

// On secure log in get and set user ID
const getUserID = () => {
	// This user ID with an authentication system would be generated by the server and sent to the client on login. This is just a mock for demonstration purposes
	let userId = getLocalStorageItem("userId");
	if (!userId) {
		userId = generateUUID();
		setLocalStorageItem("userId", userId);
	}
};

getUserID();

const queryClient = new QueryClient();

export const Route = createRootRoute({
	loader: () => <Skeleton />,
	component: () => (
		<QueryClientProvider client={queryClient}>
			<div className="w-full flex flex-row place-content-center bg-gray-100">
				<div className="w-11/12 max-w-7xl min-h-screen flex flex-col ">
					<div className="bg-gray-100 h-full">
						<Header />
						<main className="px-4 py-8 bg-white">
							<Outlet />
						</main>
					</div>
					<Footer />
				</div>
			</div>
			<Suspense>
				<TanStackRouterDevtools />
				<ReactQueryDevtools />
			</Suspense>
		</QueryClientProvider>
	),
	notFoundComponent: () => {
		return <NotFoundPage />;
	},
});
