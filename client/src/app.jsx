import ErrorMessage from "@/components/errorMessage";
import Router, { Route, Switch } from "crossroad";
import React, { lazy, Suspense } from "react";
import { ErrorBoundary } from "react-error-boundary";

import Footer from "@/components/footer";
import Header from "@/components/header";
import Skeleton from "@/components/skeleton";

import { generateUUID } from "@/utils/generateUUID";
import { getLocalStorageItem, setLocalStorageItem } from "@/utils/localStorage";

const Home = lazy(() => import("@/routes/home"));

const SinglePageFormPage = lazy(
	() => import("@/components/single-page-form/singlePageForm"),
);
const SimpleFormPage = lazy(
	() => import("@/components/simple-form/simpleFormPage"),
);
const MultiPageForm = lazy(
	() => import("@/components/multi-page-form/multi-page-form"),
);
const NotFoundPage = lazy(() => import("@/routes/notFoundPage"));

/**
 * The main application component that sets up routing, error boundaries, and layout.
 *
 * @component
 * @returns {JSX.Element} The rendered component.
 */
export default function App() {
	// On secure log in get and set user ID
	const getUserID = () => {
		// This user ID with an authentication system would be generated by the server and sent to the client on login. This is just a mock for demonstration purposes
		let userId = getLocalStorageItem("userId");
		if (!userId) {
			userId = generateUUID();
			setLocalStorageItem("userId", userId);
		}
	};

	getUserID();

	return (
		/* ErrorBoundary is a component that catches JavaScript errors anywhere in its child component tree and logs those errors, and displays a fallback UI instead of the component tree that crashed. */

		<div className="w-full flex flex-row place-content-center bg-gray-100">
			<div className="w-11/12 max-w-7xl min-h-screen flex flex-col ">
				<div className="bg-gray-100 h-full">
					{/* Router component */}
					<Router>
						<Header />
						<main className="px-4 py-8 bg-white">
							<ErrorBoundary
								fallback={<ErrorMessage message={"Error occured in routing"} />}
								onError={(error) => console.error(error)}
							>
								{/* Suspense component */}
								<Suspense
									fallback={
										<div className="mt-6">
											<Skeleton />
										</div>
									}
								>
									{/* Switch component */}
									<Switch redirect="/">
										<Route exact path="/">
											<Home />
										</Route>
										<Route
											path="/multi/:step"
											component={MultiPageForm}
											render={({ step }) => <MultiPageForm step={step} />}
										/>
										<Route exact path="/simple/">
											<SimpleFormPage />
										</Route>
										<Route exact path="/single/">
											<SinglePageFormPage />
										</Route>
										<Route path="*">
											<NotFoundPage />
										</Route>
									</Switch>
								</Suspense>
							</ErrorBoundary>
						</main>
					</Router>
				</div>
				<Footer />
			</div>
		</div>
	);
}
